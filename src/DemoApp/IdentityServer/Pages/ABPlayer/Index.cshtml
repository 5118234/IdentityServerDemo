@page
@{
    ViewData["Title"] = "ABPlayer";
}

@section Styles
{
    <partial name="_CommentCoreLibraryStylesPartial" />
    <link href="~/library/ABPlayerHTML5/css/base.css" rel="stylesheet" />
    <partial name="_VideoJsStylesPartial" />
}

<h2>ABPlayer</h2>

<div class="row">
    <div class="col-md-12">
        <p>请在 wwwroot/videos 文件夹中放入名为 1.mp4 的视频文件。</p>
        <p>请在 node_modules/comment-core-library/dist/css/style.css 文件中将 .container 替换为 .abp-container 避免与bootstrap的css冲突。</p>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div id="video-js-danmaku" class="abp">
            <div id="video-js-danmaku-stage" class="abp-container" style="pointer-events: none;"></div>
        </div>
        <video id="videojs-flvjs-player" class="video-js vjs-default-skin" width="800" height="450" controls>
            <source src="/videos/1.flv" type='video/x-flv'>
        </video>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div id="load-player"></div>
        <video id="video-1" autobuffer="true" data-setup="{}" width="800" height="450">
            <source src="/videos/1.mp4" type="video/mp4">
            <p>Your browser does not support html5 video!</p>
        </video>
    </div>
</div>

@section Scripts
{
    <partial name="_CommentCoreLibraryScriptsPartial" />
    <partial name="_VideoJsScriptsPartial" />
    <script>
        var flvVideo = $('#videojs-flvjs-player');
        var videoFlvJs = videojs('videojs-flvjs-player', {
            //techOrder: ['html5', 'flvjs'],
            //flvjs: {
            //    mediaDataSource: {
            //        isLive: true,
            //        cors: true,
            //        withCredentials: false,
            //    },
            // config: {},
        },
            function onPlayerReady() {
                //创建弹幕供应器
                var provider = new CommentProvider();
                // 添加一个静态弹幕源（只加载一次）
                provider.addStaticSource(CommentProvider.XMLProvider('GET', '/danmaku/hanabi.xml'), CommentProvider.SOURCE_XML);
                // 添加一个解析器
                provider.addParser(new BilibiliFormat.XMLParser(), CommentProvider.SOURCE_XML);
                // 添加一个目标 (CommentManager)
                var danmakuOld = $('#video-js-danmaku');
                var danmakuNew = danmakuOld.clone();
                danmakuOld.remove();
                // 初始化完成后把弹幕层移动到video前面，避免video.js修改dom结构导致全屏后弹幕层看不见
                var flvVideoParentDiv = $('#videojs-flvjs-player');
                flvVideoParentDiv.append(danmakuNew);
                //flvVideo.before(danmaku.parent());
                var danmakuStage = $('#video-js-danmaku-stage');
                danmakuStage.width(flvVideoParentDiv.width());
                danmakuStage.height(flvVideoParentDiv.height());
                var videoJsCm = new CommentManager(danmakuStage[0]);
                flvVideoParentDiv.resize(function () {
                    danmakuStage.width(flvVideoParentDiv.width());
                    danmakuStage.height(flvVideoParentDiv.height());
                    videoJsCm.setBounds();
                })
                videoJsCm.init();
                provider.addTarget(videoJsCm);
                // 加载弹幕
                provider.load()
                    .then(function () {
                        console.log('弹幕已载入');
                    })
                    .catch(function (e) {
                        console.log('弹幕载入出错');
                    });

                //绑定播放器事件
                this.on('play', function () {
                    videoJsCm.start();
                });
                this.on('pause', function () {
                    videoJsCm.stop();
                });
                this.on('ratechange', function () {
                    videoJsCm.options.global.scale = (1 / this.playbackRate());
                    videoJsCm.rescale();
                });
                this.on('timeupdate', function () {
                    //这里是关键，此事件会随着播放持续发生，在此处更新弹幕管理器当前时间，让后续弹幕能正常进入
                    videoJsCm.time(this.currentTime() * 1000);
                });
            }
        );
    </script>

    <script src="~/library/ABPlayerHTML5/ABPlayerHTML5.js"></script>
    <script>
        var video = document.getElementById("video-1");
        var inst = ABP.create(document.getElementById('load-player'), {
            'src': {
                "playlist": [
                    {
                        "video": video,
                        "comments": "/danmaku/hanabi.xml"
                    }
                ]
            },
            'width': 800,
            'height': 522
        });
    </script>
}
