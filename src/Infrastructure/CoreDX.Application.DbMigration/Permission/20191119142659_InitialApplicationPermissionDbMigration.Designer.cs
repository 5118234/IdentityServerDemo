// <auto-generated />
using System;
using CoreDX.Application.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoreDX.Application.DbMigration.Permission
{
    [DbContext(typeof(ApplicationPermissionDbContext))]
    [Migration("20191119142659_InitialApplicationPermissionDbMigration")]
    partial class InitialApplicationPermissionDbMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoreDX.Domain.Entity.Permission.AuthorizationRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorizationRuleConfigJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModificationTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppAuthorizationRules");
                });

            modelBuilder.Entity("CoreDX.Domain.Entity.Permission.OrganizationPermissionDeclaration", b =>
                {
                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("PermissionDefinitionId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastModificationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<short>("PermissionValue")
                        .HasColumnType("smallint");

                    b.HasKey("OrganizationId", "PermissionDefinitionId");

                    b.HasIndex("PermissionDefinitionId");

                    b.ToTable("OrganizationPermissionDeclarations");
                });

            modelBuilder.Entity("CoreDX.Domain.Entity.Permission.PermissionDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("InsertOrder")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModificationTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("ValueType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("PermissionDefinitions");
                });

            modelBuilder.Entity("CoreDX.Domain.Entity.Permission.RequestAuthorizationRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AuthorizationRuleId")
                        .HasColumnType("int");

                    b.Property<int?>("AuthorizationRuleId1")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("HandlerMethodSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentificationKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModificationTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("LastModifierId")
                        .HasColumnType("int");

                    b.Property<string>("TypeFullName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationRuleId");

                    b.HasIndex("AuthorizationRuleId1");

                    b.ToTable("AppRequestAuthorizationRules");
                });

            modelBuilder.Entity("CoreDX.Domain.Entity.Permission.RolePermissionDeclaration", b =>
                {
                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("PermissionDefinitionId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastModificationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<short>("PermissionValue")
                        .HasColumnType("smallint");

                    b.HasKey("RoleId", "PermissionDefinitionId");

                    b.HasIndex("PermissionDefinitionId");

                    b.ToTable("RolePermissionDeclarations");
                });

            modelBuilder.Entity("CoreDX.Domain.Entity.Permission.UserPermissionDeclaration", b =>
                {
                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("PermissionDefinitionId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastModificationTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<short>("PermissionValue")
                        .HasColumnType("smallint");

                    b.HasKey("UserId", "PermissionDefinitionId");

                    b.HasIndex("PermissionDefinitionId");

                    b.ToTable("UserPermissionDeclarations");
                });

            modelBuilder.Entity("CoreDX.Domain.Entity.Permission.OrganizationPermissionDeclaration", b =>
                {
                    b.HasOne("CoreDX.Domain.Entity.Permission.PermissionDefinition", "PermissionDefinition")
                        .WithMany()
                        .HasForeignKey("PermissionDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreDX.Domain.Entity.Permission.RequestAuthorizationRule", b =>
                {
                    b.HasOne("CoreDX.Domain.Entity.Permission.AuthorizationRule", null)
                        .WithMany("RequestAuthorizationRules")
                        .HasForeignKey("AuthorizationRuleId");

                    b.HasOne("CoreDX.Domain.Entity.Permission.AuthorizationRule", "AuthorizationRule")
                        .WithMany()
                        .HasForeignKey("AuthorizationRuleId1");
                });

            modelBuilder.Entity("CoreDX.Domain.Entity.Permission.RolePermissionDeclaration", b =>
                {
                    b.HasOne("CoreDX.Domain.Entity.Permission.PermissionDefinition", "PermissionDefinition")
                        .WithMany()
                        .HasForeignKey("PermissionDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoreDX.Domain.Entity.Permission.UserPermissionDeclaration", b =>
                {
                    b.HasOne("CoreDX.Domain.Entity.Permission.PermissionDefinition", "PermissionDefinition")
                        .WithMany()
                        .HasForeignKey("PermissionDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
