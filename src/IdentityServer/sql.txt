IF OBJECT_ID(N'[__EFMigrationsHistory]') IS NULL
BEGIN
    CREATE TABLE [__EFMigrationsHistory] (
        [MigrationId] nvarchar(150) NOT NULL,
        [ProductVersion] nvarchar(32) NOT NULL,
        CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
    );
END;

GO

CREATE TABLE [AppUsers] (
    [Id] nvarchar(36) NOT NULL,
    [UserName] nvarchar(256) NULL,
    [NormalizedUserName] nvarchar(256) NULL,
    [Email] nvarchar(256) NULL,
    [NormalizedEmail] nvarchar(256) NULL,
    [EmailConfirmed] bit NOT NULL,
    [PasswordHash] nvarchar(max) NULL,
    [SecurityStamp] nvarchar(max) NULL,
    [ConcurrencyStamp] nvarchar(max) NULL,
    [PhoneNumber] nvarchar(max) NULL,
    [PhoneNumberConfirmed] bit NOT NULL,
    [TwoFactorEnabled] bit NOT NULL,
    [LockoutEnd] datetimeoffset NULL,
    [LockoutEnabled] bit NOT NULL,
    [AccessFailedCount] int NOT NULL,
    [OrderNumber] bigint NOT NULL IDENTITY,
    [RowVersion] rowversion NULL,
    [IsEnable] bit NOT NULL DEFAULT ('True'),
    [IsDeleted] bit NOT NULL DEFAULT ('False'),
    [CreationTime] datetimeoffset NOT NULL DEFAULT (sysDateTimeOffset()),
    [LastModificationTime] datetimeoffset NOT NULL,
    [CreationUserId] nvarchar(36) NULL,
    [LastModificationUserId] nvarchar(36) NULL,
    [Sex] int NULL,
    CONSTRAINT [PK_AppUsers] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_AppUsers_AppUsers_CreationUserId] FOREIGN KEY ([CreationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_AppUsers_AppUsers_LastModificationUserId] FOREIGN KEY ([LastModificationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION
);

GO

CREATE TABLE [AppRoles] (
    [Id] nvarchar(36) NOT NULL,
    [Name] nvarchar(256) NULL,
    [NormalizedName] nvarchar(256) NULL,
    [ConcurrencyStamp] nvarchar(max) NULL,
    [ParentId] nvarchar(36) NULL,
    [OrderNumber] bigint NOT NULL IDENTITY,
    [RowVersion] rowversion NULL,
    [IsEnable] bit NOT NULL DEFAULT ('True'),
    [IsDeleted] bit NOT NULL DEFAULT ('False'),
    [CreationTime] datetimeoffset NOT NULL DEFAULT (sysDateTimeOffset()),
    [LastModificationTime] datetimeoffset NOT NULL,
    [CreationUserId] nvarchar(36) NULL,
    [LastModificationUserId] nvarchar(36) NULL,
    [Description] nvarchar(max) NULL,
    CONSTRAINT [PK_AppRoles] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_AppRoles_AppUsers_CreationUserId] FOREIGN KEY ([CreationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_AppRoles_AppUsers_LastModificationUserId] FOREIGN KEY ([LastModificationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_AppRoles_AppRoles_ParentId] FOREIGN KEY ([ParentId]) REFERENCES [AppRoles] ([Id]) ON DELETE NO ACTION
);

GO

CREATE TABLE [AppUserClaims] (
    [Id] int NOT NULL IDENTITY,
    [UserId] nvarchar(36) NOT NULL,
    [ClaimType] nvarchar(max) NULL,
    [ClaimValue] nvarchar(max) NULL,
    [OrderNumber] bigint NOT NULL,
    [RowVersion] rowversion NULL,
    [IsEnable] bit NOT NULL DEFAULT ('True'),
    [IsDeleted] bit NOT NULL DEFAULT ('False'),
    [CreationTime] datetimeoffset NOT NULL DEFAULT (sysDateTimeOffset()),
    [LastModificationTime] datetimeoffset NOT NULL,
    [CreationUserId] nvarchar(36) NULL,
    [LastModificationUserId] nvarchar(36) NULL,
    CONSTRAINT [PK_AppUserClaims] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_AppUserClaims_AppUsers_CreationUserId] FOREIGN KEY ([CreationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_AppUserClaims_AppUsers_LastModificationUserId] FOREIGN KEY ([LastModificationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_AppUserClaims_AppUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [AppUsers] ([Id]) ON DELETE CASCADE
);

GO

CREATE TABLE [AppUserTokens] (
    [UserId] nvarchar(36) NOT NULL,
    [LoginProvider] nvarchar(450) NOT NULL,
    [Name] nvarchar(450) NOT NULL,
    [Value] nvarchar(max) NULL,
    [OrderNumber] bigint NOT NULL IDENTITY,
    [RowVersion] rowversion NULL,
    [IsEnable] bit NOT NULL DEFAULT ('True'),
    [IsDeleted] bit NOT NULL DEFAULT ('False'),
    [CreationTime] datetimeoffset NOT NULL DEFAULT (sysDateTimeOffset()),
    [LastModificationTime] datetimeoffset NOT NULL,
    [CreationUserId] nvarchar(36) NULL,
    [LastModificationUserId] nvarchar(36) NULL,
    CONSTRAINT [PK_AppUserTokens] PRIMARY KEY ([UserId], [LoginProvider], [Name]),
    CONSTRAINT [FK_AppUserTokens_AppUsers_CreationUserId] FOREIGN KEY ([CreationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_AppUserTokens_AppUsers_LastModificationUserId] FOREIGN KEY ([LastModificationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_AppUserTokens_AppUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [AppUsers] ([Id]) ON DELETE CASCADE
);

GO

CREATE TABLE [AuthorizationRules] (
    [Id] nvarchar(36) NOT NULL,
    [Remark] nvarchar(max) NULL,
    [OrderNumber] bigint NOT NULL IDENTITY,
    [RowVersion] rowversion NULL,
    [IsEnable] bit NOT NULL DEFAULT ('True'),
    [IsDeleted] bit NOT NULL DEFAULT ('False'),
    [CreationTime] datetimeoffset NOT NULL DEFAULT (sysDateTimeOffset()),
    [LastModificationTime] datetimeoffset NOT NULL,
    [CreationUserId] nvarchar(36) NULL,
    [LastModificationUserId] nvarchar(36) NULL,
    [AuthorizationRuleConfigJson] nvarchar(max) NULL,
    CONSTRAINT [PK_AuthorizationRules] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_AuthorizationRules_AppUsers_CreationUserId] FOREIGN KEY ([CreationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_AuthorizationRules_AppUsers_LastModificationUserId] FOREIGN KEY ([LastModificationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION
);

GO

CREATE TABLE [Domains] (
    [Id] nvarchar(36) NOT NULL,
    [Remark] nvarchar(max) NULL,
    [OrderNumber] bigint NOT NULL IDENTITY,
    [RowVersion] rowversion NULL,
    [IsEnable] bit NOT NULL DEFAULT ('True'),
    [IsDeleted] bit NOT NULL DEFAULT ('False'),
    [CreationTime] datetimeoffset NOT NULL DEFAULT (sysDateTimeOffset()),
    [LastModificationTime] datetimeoffset NOT NULL,
    [CreationUserId] nvarchar(36) NULL,
    [LastModificationUserId] nvarchar(36) NULL,
    [SC] nvarchar(max) NULL,
    CONSTRAINT [PK_Domains] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_Domains_AppUsers_CreationUserId] FOREIGN KEY ([CreationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_Domains_AppUsers_LastModificationUserId] FOREIGN KEY ([LastModificationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION
);

GO

CREATE TABLE [Menus] (
    [Id] nvarchar(36) NOT NULL,
    [Remark] nvarchar(max) NULL,
    [OrderNumber] bigint NOT NULL IDENTITY,
    [RowVersion] rowversion NULL,
    [IsEnable] bit NOT NULL DEFAULT ('True'),
    [IsDeleted] bit NOT NULL DEFAULT ('False'),
    [CreationTime] datetimeoffset NOT NULL DEFAULT (sysDateTimeOffset()),
    [LastModificationTime] datetimeoffset NOT NULL,
    [CreationUserId] nvarchar(36) NULL,
    [LastModificationUserId] nvarchar(36) NULL,
    [ParentId] nvarchar(36) NULL,
    [Icon_Type] nvarchar(max) NULL,
    [Icon_Value] nvarchar(max) NULL,
    [Title] nvarchar(max) NULL,
    [Order] smallint NOT NULL,
    CONSTRAINT [PK_Menus] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_Menus_AppUsers_CreationUserId] FOREIGN KEY ([CreationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_Menus_AppUsers_LastModificationUserId] FOREIGN KEY ([LastModificationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_Menus_Menus_ParentId] FOREIGN KEY ([ParentId]) REFERENCES [Menus] ([Id]) ON DELETE NO ACTION
);

GO

CREATE TABLE [Organizations] (
    [Id] nvarchar(36) NOT NULL,
    [Remark] nvarchar(max) NULL,
    [OrderNumber] bigint NOT NULL IDENTITY,
    [RowVersion] rowversion NULL,
    [IsEnable] bit NOT NULL DEFAULT ('True'),
    [IsDeleted] bit NOT NULL DEFAULT ('False'),
    [CreationTime] datetimeoffset NOT NULL DEFAULT (sysDateTimeOffset()),
    [LastModificationTime] datetimeoffset NOT NULL,
    [CreationUserId] nvarchar(36) NULL,
    [LastModificationUserId] nvarchar(36) NULL,
    [ParentId] nvarchar(36) NULL,
    [Name] nvarchar(max) NULL,
    [Description] nvarchar(max) NULL,
    CONSTRAINT [PK_Organizations] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_Organizations_AppUsers_CreationUserId] FOREIGN KEY ([CreationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_Organizations_AppUsers_LastModificationUserId] FOREIGN KEY ([LastModificationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_Organizations_Organizations_ParentId] FOREIGN KEY ([ParentId]) REFERENCES [Organizations] ([Id]) ON DELETE NO ACTION
);

GO

CREATE TABLE [PermissionDefinitions] (
    [Id] nvarchar(36) NOT NULL,
    [Remark] nvarchar(max) NULL,
    [OrderNumber] bigint NOT NULL IDENTITY,
    [RowVersion] rowversion NULL,
    [IsEnable] bit NOT NULL DEFAULT ('True'),
    [IsDeleted] bit NOT NULL DEFAULT ('False'),
    [CreationTime] datetimeoffset NOT NULL DEFAULT (sysDateTimeOffset()),
    [LastModificationTime] datetimeoffset NOT NULL,
    [CreationUserId] nvarchar(36) NULL,
    [LastModificationUserId] nvarchar(36) NULL,
    [Name] nvarchar(max) NULL,
    [Description] nvarchar(max) NULL,
    [ValueType] smallint NOT NULL,
    CONSTRAINT [PK_PermissionDefinitions] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_PermissionDefinitions_AppUsers_CreationUserId] FOREIGN KEY ([CreationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_PermissionDefinitions_AppUsers_LastModificationUserId] FOREIGN KEY ([LastModificationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION
);

GO

CREATE TABLE [TreeDomains] (
    [Id] nvarchar(36) NOT NULL,
    [Remark] nvarchar(max) NULL,
    [OrderNumber] bigint NOT NULL IDENTITY,
    [RowVersion] rowversion NULL,
    [IsEnable] bit NOT NULL DEFAULT ('True'),
    [IsDeleted] bit NOT NULL DEFAULT ('False'),
    [CreationTime] datetimeoffset NOT NULL DEFAULT (sysDateTimeOffset()),
    [LastModificationTime] datetimeoffset NOT NULL,
    [CreationUserId] nvarchar(36) NULL,
    [LastModificationUserId] nvarchar(36) NULL,
    [ParentId] nvarchar(36) NULL,
    [SampleColumn] nvarchar(max) NULL,
    CONSTRAINT [PK_TreeDomains] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_TreeDomains_AppUsers_CreationUserId] FOREIGN KEY ([CreationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_TreeDomains_AppUsers_LastModificationUserId] FOREIGN KEY ([LastModificationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_TreeDomains_TreeDomains_ParentId] FOREIGN KEY ([ParentId]) REFERENCES [TreeDomains] ([Id]) ON DELETE NO ACTION
);

GO

CREATE TABLE [UserLogins] (
    [LoginProvider] nvarchar(450) NOT NULL,
    [ProviderKey] nvarchar(450) NOT NULL,
    [ProviderDisplayName] nvarchar(max) NULL,
    [UserId] nvarchar(36) NOT NULL,
    [OrderNumber] bigint NOT NULL IDENTITY,
    [RowVersion] rowversion NULL,
    [IsEnable] bit NOT NULL DEFAULT ('True'),
    [IsDeleted] bit NOT NULL DEFAULT ('False'),
    [CreationTime] datetimeoffset NOT NULL DEFAULT (sysDateTimeOffset()),
    [LastModificationTime] datetimeoffset NOT NULL,
    [CreationUserId] nvarchar(36) NULL,
    [LastModificationUserId] nvarchar(36) NULL,
    CONSTRAINT [PK_UserLogins] PRIMARY KEY ([LoginProvider], [ProviderKey]),
    CONSTRAINT [FK_UserLogins_AppUsers_CreationUserId] FOREIGN KEY ([CreationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_UserLogins_AppUsers_LastModificationUserId] FOREIGN KEY ([LastModificationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_UserLogins_AppUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [AppUsers] ([Id]) ON DELETE CASCADE
);

GO

CREATE TABLE [AppRoleClaims] (
    [Id] int NOT NULL IDENTITY,
    [RoleId] nvarchar(36) NOT NULL,
    [ClaimType] nvarchar(max) NULL,
    [ClaimValue] nvarchar(max) NULL,
    [OrderNumber] bigint NOT NULL,
    [RowVersion] rowversion NULL,
    [IsEnable] bit NOT NULL DEFAULT ('True'),
    [IsDeleted] bit NOT NULL DEFAULT ('False'),
    [CreationTime] datetimeoffset NOT NULL DEFAULT (sysDateTimeOffset()),
    [LastModificationTime] datetimeoffset NOT NULL,
    [CreationUserId] nvarchar(36) NULL,
    [LastModificationUserId] nvarchar(36) NULL,
    CONSTRAINT [PK_AppRoleClaims] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_AppRoleClaims_AppUsers_CreationUserId] FOREIGN KEY ([CreationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_AppRoleClaims_AppUsers_LastModificationUserId] FOREIGN KEY ([LastModificationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_AppRoleClaims_AppRoles_RoleId] FOREIGN KEY ([RoleId]) REFERENCES [AppRoles] ([Id]) ON DELETE CASCADE
);

GO

CREATE TABLE [AppUserRoles] (
    [UserId] nvarchar(36) NOT NULL,
    [RoleId] nvarchar(36) NOT NULL,
    [OrderNumber] bigint NOT NULL IDENTITY,
    [RowVersion] rowversion NULL,
    [IsEnable] bit NOT NULL DEFAULT ('True'),
    [IsDeleted] bit NOT NULL DEFAULT ('False'),
    [CreationTime] datetimeoffset NOT NULL DEFAULT (sysDateTimeOffset()),
    [LastModificationTime] datetimeoffset NOT NULL,
    [CreationUserId] nvarchar(36) NULL,
    [LastModificationUserId] nvarchar(36) NULL,
    CONSTRAINT [PK_AppUserRoles] PRIMARY KEY ([UserId], [RoleId]),
    CONSTRAINT [FK_AppUserRoles_AppUsers_CreationUserId] FOREIGN KEY ([CreationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_AppUserRoles_AppUsers_LastModificationUserId] FOREIGN KEY ([LastModificationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_AppUserRoles_AppRoles_RoleId] FOREIGN KEY ([RoleId]) REFERENCES [AppRoles] ([Id]) ON DELETE CASCADE,
    CONSTRAINT [FK_AppUserRoles_AppUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [AppUsers] ([Id]) ON DELETE CASCADE
);

GO

CREATE TABLE [RequestAuthorizationRules] (
    [Id] nvarchar(36) NOT NULL,
    [Remark] nvarchar(max) NULL,
    [OrderNumber] bigint NOT NULL IDENTITY,
    [RowVersion] rowversion NULL,
    [IsEnable] bit NOT NULL DEFAULT ('True'),
    [IsDeleted] bit NOT NULL DEFAULT ('False'),
    [CreationTime] datetimeoffset NOT NULL DEFAULT (sysDateTimeOffset()),
    [LastModificationTime] datetimeoffset NOT NULL,
    [CreationUserId] nvarchar(36) NULL,
    [LastModificationUserId] nvarchar(36) NULL,
    [HandlerMethodSignature] nvarchar(max) NULL,
    [TypeFullName] nvarchar(max) NULL,
    [IdentificationKey] nvarchar(max) NULL,
    [AuthorizationRuleId] nvarchar(36) NULL,
    CONSTRAINT [PK_RequestAuthorizationRules] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_RequestAuthorizationRules_AuthorizationRules_AuthorizationRuleId] FOREIGN KEY ([AuthorizationRuleId]) REFERENCES [AuthorizationRules] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_RequestAuthorizationRules_AppUsers_CreationUserId] FOREIGN KEY ([CreationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_RequestAuthorizationRules_AppUsers_LastModificationUserId] FOREIGN KEY ([LastModificationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION
);

GO

CREATE TABLE [ComplexProperty] (
    [DomainId] nvarchar(36) NOT NULL,
    [C1] nvarchar(max) NULL,
    [C2] nvarchar(max) NULL,
    CONSTRAINT [PK_ComplexProperty] PRIMARY KEY ([DomainId]),
    CONSTRAINT [FK_ComplexProperty_Domains_DomainId] FOREIGN KEY ([DomainId]) REFERENCES [Domains] ([Id]) ON DELETE CASCADE
);

GO

CREATE TABLE [MenuItems] (
    [Id] nvarchar(36) NOT NULL,
    [Remark] nvarchar(max) NULL,
    [OrderNumber] bigint NOT NULL IDENTITY,
    [RowVersion] rowversion NULL,
    [IsEnable] bit NOT NULL DEFAULT ('True'),
    [IsDeleted] bit NOT NULL DEFAULT ('False'),
    [CreationTime] datetimeoffset NOT NULL DEFAULT (sysDateTimeOffset()),
    [LastModificationTime] datetimeoffset NOT NULL,
    [CreationUserId] nvarchar(36) NULL,
    [LastModificationUserId] nvarchar(36) NULL,
    [Icon_Type] nvarchar(max) NULL,
    [Icon_Value] nvarchar(max) NULL,
    [Title] nvarchar(max) NULL,
    [Link] nvarchar(max) NULL,
    [Order] smallint NOT NULL,
    [MenuId] nvarchar(36) NOT NULL,
    CONSTRAINT [PK_MenuItems] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_MenuItems_AppUsers_CreationUserId] FOREIGN KEY ([CreationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_MenuItems_AppUsers_LastModificationUserId] FOREIGN KEY ([LastModificationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_MenuItems_Menus_MenuId] FOREIGN KEY ([MenuId]) REFERENCES [Menus] ([Id]) ON DELETE CASCADE
);

GO

CREATE TABLE [AppUserOrganizations] (
    [Id] nvarchar(36) NOT NULL,
    [Remark] nvarchar(max) NULL,
    [OrderNumber] bigint NOT NULL IDENTITY,
    [RowVersion] rowversion NULL,
    [IsEnable] bit NOT NULL DEFAULT ('True'),
    [IsDeleted] bit NOT NULL DEFAULT ('False'),
    [CreationTime] datetimeoffset NOT NULL DEFAULT (sysDateTimeOffset()),
    [LastModificationTime] datetimeoffset NOT NULL,
    [CreationUserId] nvarchar(36) NULL,
    [LastModificationUserId] nvarchar(36) NULL,
    [UserId] nvarchar(36) NOT NULL,
    [OrganizationId] nvarchar(36) NOT NULL,
    CONSTRAINT [PK_AppUserOrganizations] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_AppUserOrganizations_AppUsers_CreationUserId] FOREIGN KEY ([CreationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_AppUserOrganizations_AppUsers_LastModificationUserId] FOREIGN KEY ([LastModificationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_AppUserOrganizations_Organizations_OrganizationId] FOREIGN KEY ([OrganizationId]) REFERENCES [Organizations] ([Id]) ON DELETE CASCADE,
    CONSTRAINT [FK_AppUserOrganizations_AppUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [AppUsers] ([Id]) ON DELETE CASCADE
);

GO

CREATE TABLE [OrganizationPermissionDeclarations] (
    [Id] nvarchar(36) NOT NULL,
    [Remark] nvarchar(max) NULL,
    [OrderNumber] bigint NOT NULL IDENTITY,
    [RowVersion] rowversion NULL,
    [IsEnable] bit NOT NULL DEFAULT ('True'),
    [IsDeleted] bit NOT NULL DEFAULT ('False'),
    [CreationTime] datetimeoffset NOT NULL DEFAULT (sysDateTimeOffset()),
    [LastModificationTime] datetimeoffset NOT NULL,
    [CreationUserId] nvarchar(36) NULL,
    [LastModificationUserId] nvarchar(36) NULL,
    [PermissionValue] smallint NOT NULL,
    [PermissionDefinitionId] nvarchar(36) NULL,
    [OrganizationId] nvarchar(36) NULL,
    CONSTRAINT [PK_OrganizationPermissionDeclarations] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_OrganizationPermissionDeclarations_AppUsers_CreationUserId] FOREIGN KEY ([CreationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_OrganizationPermissionDeclarations_AppUsers_LastModificationUserId] FOREIGN KEY ([LastModificationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_OrganizationPermissionDeclarations_Organizations_OrganizationId] FOREIGN KEY ([OrganizationId]) REFERENCES [Organizations] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_OrganizationPermissionDeclarations_PermissionDefinitions_PermissionDefinitionId] FOREIGN KEY ([PermissionDefinitionId]) REFERENCES [PermissionDefinitions] ([Id]) ON DELETE NO ACTION
);

GO

CREATE TABLE [RolePermissionDeclarations] (
    [Id] nvarchar(36) NOT NULL,
    [Remark] nvarchar(max) NULL,
    [OrderNumber] bigint NOT NULL IDENTITY,
    [RowVersion] rowversion NULL,
    [IsEnable] bit NOT NULL DEFAULT ('True'),
    [IsDeleted] bit NOT NULL DEFAULT ('False'),
    [CreationTime] datetimeoffset NOT NULL DEFAULT (sysDateTimeOffset()),
    [LastModificationTime] datetimeoffset NOT NULL,
    [CreationUserId] nvarchar(36) NULL,
    [LastModificationUserId] nvarchar(36) NULL,
    [PermissionValue] smallint NOT NULL,
    [PermissionDefinitionId] nvarchar(36) NULL,
    [RoleId] nvarchar(36) NULL,
    CONSTRAINT [PK_RolePermissionDeclarations] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_RolePermissionDeclarations_AppUsers_CreationUserId] FOREIGN KEY ([CreationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_RolePermissionDeclarations_AppUsers_LastModificationUserId] FOREIGN KEY ([LastModificationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_RolePermissionDeclarations_PermissionDefinitions_PermissionDefinitionId] FOREIGN KEY ([PermissionDefinitionId]) REFERENCES [PermissionDefinitions] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_RolePermissionDeclarations_AppRoles_RoleId] FOREIGN KEY ([RoleId]) REFERENCES [AppRoles] ([Id]) ON DELETE NO ACTION
);

GO

CREATE TABLE [UserPermissionDeclarations] (
    [Id] nvarchar(36) NOT NULL,
    [Remark] nvarchar(max) NULL,
    [OrderNumber] bigint NOT NULL IDENTITY,
    [RowVersion] rowversion NULL,
    [IsEnable] bit NOT NULL DEFAULT ('True'),
    [IsDeleted] bit NOT NULL DEFAULT ('False'),
    [CreationTime] datetimeoffset NOT NULL DEFAULT (sysDateTimeOffset()),
    [LastModificationTime] datetimeoffset NOT NULL,
    [CreationUserId] nvarchar(36) NULL,
    [LastModificationUserId] nvarchar(36) NULL,
    [PermissionValue] smallint NOT NULL,
    [PermissionDefinitionId] nvarchar(36) NULL,
    [UserId] nvarchar(36) NULL,
    CONSTRAINT [PK_UserPermissionDeclarations] PRIMARY KEY ([Id]),
    CONSTRAINT [FK_UserPermissionDeclarations_AppUsers_CreationUserId] FOREIGN KEY ([CreationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_UserPermissionDeclarations_AppUsers_LastModificationUserId] FOREIGN KEY ([LastModificationUserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_UserPermissionDeclarations_PermissionDefinitions_PermissionDefinitionId] FOREIGN KEY ([PermissionDefinitionId]) REFERENCES [PermissionDefinitions] ([Id]) ON DELETE NO ACTION,
    CONSTRAINT [FK_UserPermissionDeclarations_AppUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [AppUsers] ([Id]) ON DELETE NO ACTION
);

GO

CREATE TABLE [ComplexProperty2] (
    [ComplexEntityPropertyDomainId] nvarchar(36) NOT NULL,
    [C3] nvarchar(max) NULL,
    [C4] nvarchar(max) NULL,
    CONSTRAINT [PK_ComplexProperty2] PRIMARY KEY ([ComplexEntityPropertyDomainId]),
    CONSTRAINT [FK_ComplexProperty2_ComplexProperty_ComplexEntityPropertyDomainId] FOREIGN KEY ([ComplexEntityPropertyDomainId]) REFERENCES [ComplexProperty] ([DomainId]) ON DELETE CASCADE
);

GO

CREATE INDEX [IX_AppRoleClaims_CreationUserId] ON [AppRoleClaims] ([CreationUserId]);

GO

CREATE INDEX [IX_AppRoleClaims_LastModificationUserId] ON [AppRoleClaims] ([LastModificationUserId]);

GO

CREATE INDEX [IX_AppRoleClaims_RoleId] ON [AppRoleClaims] ([RoleId]);

GO

CREATE INDEX [IX_AppRoles_CreationUserId] ON [AppRoles] ([CreationUserId]);

GO

CREATE INDEX [IX_AppRoles_LastModificationUserId] ON [AppRoles] ([LastModificationUserId]);

GO

CREATE UNIQUE INDEX [RoleNameIndex] ON [AppRoles] ([NormalizedName]) WHERE [NormalizedName] IS NOT NULL;

GO

CREATE INDEX [IX_AppRoles_ParentId] ON [AppRoles] ([ParentId]);

GO

CREATE INDEX [IX_AppUserClaims_CreationUserId] ON [AppUserClaims] ([CreationUserId]);

GO

CREATE INDEX [IX_AppUserClaims_LastModificationUserId] ON [AppUserClaims] ([LastModificationUserId]);

GO

CREATE INDEX [IX_AppUserClaims_UserId] ON [AppUserClaims] ([UserId]);

GO

CREATE INDEX [IX_AppUserOrganizations_CreationUserId] ON [AppUserOrganizations] ([CreationUserId]);

GO

CREATE INDEX [IX_AppUserOrganizations_LastModificationUserId] ON [AppUserOrganizations] ([LastModificationUserId]);

GO

CREATE INDEX [IX_AppUserOrganizations_OrganizationId] ON [AppUserOrganizations] ([OrganizationId]);

GO

CREATE INDEX [IX_AppUserOrganizations_UserId] ON [AppUserOrganizations] ([UserId]);

GO

CREATE INDEX [IX_AppUserRoles_CreationUserId] ON [AppUserRoles] ([CreationUserId]);

GO

CREATE INDEX [IX_AppUserRoles_LastModificationUserId] ON [AppUserRoles] ([LastModificationUserId]);

GO

CREATE INDEX [IX_AppUserRoles_RoleId] ON [AppUserRoles] ([RoleId]);

GO

CREATE INDEX [IX_AppUsers_CreationUserId] ON [AppUsers] ([CreationUserId]);

GO

CREATE INDEX [IX_AppUsers_LastModificationUserId] ON [AppUsers] ([LastModificationUserId]);

GO

CREATE INDEX [EmailIndex] ON [AppUsers] ([NormalizedEmail]);

GO

CREATE UNIQUE INDEX [UserNameIndex] ON [AppUsers] ([NormalizedUserName]) WHERE [NormalizedUserName] IS NOT NULL;

GO

CREATE INDEX [IX_AppUserTokens_CreationUserId] ON [AppUserTokens] ([CreationUserId]);

GO

CREATE INDEX [IX_AppUserTokens_LastModificationUserId] ON [AppUserTokens] ([LastModificationUserId]);

GO

CREATE INDEX [IX_AuthorizationRules_CreationUserId] ON [AuthorizationRules] ([CreationUserId]);

GO

CREATE INDEX [IX_AuthorizationRules_LastModificationUserId] ON [AuthorizationRules] ([LastModificationUserId]);

GO

CREATE INDEX [IX_Domains_CreationUserId] ON [Domains] ([CreationUserId]);

GO

CREATE INDEX [IX_Domains_LastModificationUserId] ON [Domains] ([LastModificationUserId]);

GO

CREATE INDEX [IX_MenuItems_CreationUserId] ON [MenuItems] ([CreationUserId]);

GO

CREATE INDEX [IX_MenuItems_LastModificationUserId] ON [MenuItems] ([LastModificationUserId]);

GO

CREATE INDEX [IX_MenuItems_MenuId] ON [MenuItems] ([MenuId]);

GO

CREATE INDEX [IX_Menus_CreationUserId] ON [Menus] ([CreationUserId]);

GO

CREATE INDEX [IX_Menus_LastModificationUserId] ON [Menus] ([LastModificationUserId]);

GO

CREATE INDEX [IX_Menus_ParentId] ON [Menus] ([ParentId]);

GO

CREATE INDEX [IX_OrganizationPermissionDeclarations_CreationUserId] ON [OrganizationPermissionDeclarations] ([CreationUserId]);

GO

CREATE INDEX [IX_OrganizationPermissionDeclarations_LastModificationUserId] ON [OrganizationPermissionDeclarations] ([LastModificationUserId]);

GO

CREATE INDEX [IX_OrganizationPermissionDeclarations_OrganizationId] ON [OrganizationPermissionDeclarations] ([OrganizationId]);

GO

CREATE INDEX [IX_OrganizationPermissionDeclarations_PermissionDefinitionId] ON [OrganizationPermissionDeclarations] ([PermissionDefinitionId]);

GO

CREATE INDEX [IX_Organizations_CreationUserId] ON [Organizations] ([CreationUserId]);

GO

CREATE INDEX [IX_Organizations_LastModificationUserId] ON [Organizations] ([LastModificationUserId]);

GO

CREATE INDEX [IX_Organizations_ParentId] ON [Organizations] ([ParentId]);

GO

CREATE INDEX [IX_PermissionDefinitions_CreationUserId] ON [PermissionDefinitions] ([CreationUserId]);

GO

CREATE INDEX [IX_PermissionDefinitions_LastModificationUserId] ON [PermissionDefinitions] ([LastModificationUserId]);

GO

CREATE INDEX [IX_RequestAuthorizationRules_AuthorizationRuleId] ON [RequestAuthorizationRules] ([AuthorizationRuleId]);

GO

CREATE INDEX [IX_RequestAuthorizationRules_CreationUserId] ON [RequestAuthorizationRules] ([CreationUserId]);

GO

CREATE INDEX [IX_RequestAuthorizationRules_LastModificationUserId] ON [RequestAuthorizationRules] ([LastModificationUserId]);

GO

CREATE INDEX [IX_RolePermissionDeclarations_CreationUserId] ON [RolePermissionDeclarations] ([CreationUserId]);

GO

CREATE INDEX [IX_RolePermissionDeclarations_LastModificationUserId] ON [RolePermissionDeclarations] ([LastModificationUserId]);

GO

CREATE INDEX [IX_RolePermissionDeclarations_PermissionDefinitionId] ON [RolePermissionDeclarations] ([PermissionDefinitionId]);

GO

CREATE INDEX [IX_RolePermissionDeclarations_RoleId] ON [RolePermissionDeclarations] ([RoleId]);

GO

CREATE INDEX [IX_TreeDomains_CreationUserId] ON [TreeDomains] ([CreationUserId]);

GO

CREATE INDEX [IX_TreeDomains_LastModificationUserId] ON [TreeDomains] ([LastModificationUserId]);

GO

CREATE INDEX [IX_TreeDomains_ParentId] ON [TreeDomains] ([ParentId]);

GO

CREATE INDEX [IX_UserLogins_CreationUserId] ON [UserLogins] ([CreationUserId]);

GO

CREATE INDEX [IX_UserLogins_LastModificationUserId] ON [UserLogins] ([LastModificationUserId]);

GO

CREATE INDEX [IX_UserLogins_UserId] ON [UserLogins] ([UserId]);

GO

CREATE INDEX [IX_UserPermissionDeclarations_CreationUserId] ON [UserPermissionDeclarations] ([CreationUserId]);

GO

CREATE INDEX [IX_UserPermissionDeclarations_LastModificationUserId] ON [UserPermissionDeclarations] ([LastModificationUserId]);

GO

CREATE INDEX [IX_UserPermissionDeclarations_PermissionDefinitionId] ON [UserPermissionDeclarations] ([PermissionDefinitionId]);

GO

CREATE INDEX [IX_UserPermissionDeclarations_UserId] ON [UserPermissionDeclarations] ([UserId]);

GO


--判断视图是否存在
if exists(select * from sysobjects where id=OBJECT_ID(N'view_Organizations') and objectproperty(id,N'IsView')=1)
drop view view_Organizations    --删除视图

GO

create view view_Organizations    --创建视图
--with schemaBinding    --如果要创建带索引的视图要加上这句
as
with temp([Id], [CreationTime], [CreationUserId], [Description], [IsDeleted], [IsEnable], [LastModificationTime], [LastModificationUserId], [Name], [OrderNumber], [ParentId], [Remark], [RowVersion], Depth, Path, HasChildren) as
(
	--初始查询（这里的 ParentId is null 在我的数据中是最底层的根节点）
	select [Id], [CreationTime], [CreationUserId], [Description], [IsDeleted], [IsEnable], [LastModificationTime], [LastModificationUserId], [Name], [OrderNumber], [ParentId], [Remark], [RowVersion],
		0 as Depth,
		'/' + cast(Id as nvarchar(max)) as Path, --如果Id使用Guid类型，可能会导致层数太深时出问题（大概100层左右，超过4000字之后的字符串会被砍掉,sqlserver 2005以后用 nvarchar(max)可以突破限制），Guid的字数太多了
		HasChildren = (case when exists(select 1 from Organizations where Organizations.ParentId = root.id) then cast(1 as bit) else cast(0 as bit) end)
	from Organizations as root
	where ParentId is null

	union all
	--递归条件
	select child.[Id], child.[CreationTime], child.[CreationUserId], child.[Description], child.[IsDeleted], child.[IsEnable], child.[LastModificationTime], child.[LastModificationUserId], child.[Name], child.[OrderNumber], child.[ParentId], child.[Remark], child.[RowVersion],
		parent.Depth+1,
		parent.Path + '/' + cast(child.Id as nvarchar(max)),
		HasChildren = (case when exists(select 1 from Organizations where Organizations.ParentId = child.id) then cast(1 as bit) else cast(0 as bit) end)
	from Organizations as child --3：这里的临时表和原始数据表都必须使用别名不然递归的时候不知道查询的是那个表的列
	inner join
	temp as parent
	on (child.ParentId = parent.Id) --这个关联关系很重要，一定要理解一下谁是谁的父节点
)
select * --top 100 percent * --Id, pId, Str, depth, path, hasChild -- 要创建索引的视图不能使用 select * 的写法 -- 带公用表表达式的视图无法创建索引
from temp
--order by temp.Id --4：递归完成后 一定不要少了这句查询语句 否则会报错 -- 创建视图则无需排序，视图的排序对外部引用无效，要在外部查询指定排序

GO

----在视图上建立唯一的聚集索引
--create unique clustered index
--Index_View on view_Organizations(Id)

----在视图上建立非聚集索引
--create index
--Index_View_depth on view_Organizations(depth)

--create index
--Index_View_hasChild on view_Organizations(hasChild)

--create index
--Index_View_path on view_Organizations(path)
--go

----为表明已经给视图建立一个索引，并且它确实占用数据库的空间，运行下面的脚本查明聚集索引有多少行以及视图占用多少空间。
--execute sp_spaceused 'viewTree'
--go

GO


--判断视图是否存在
if exists(select * from sysobjects where id=OBJECT_ID(N'view_Menus') and objectproperty(id,N'IsView')=1)
drop view view_Menus    --删除视图

GO

create view view_Menus    --创建视图
--with schemaBinding    --如果要创建带索引的视图要加上这句
as
with temp([Id], [CreationTime], [CreationUserId], [IsDeleted], [IsEnable], [LastModificationTime], [LastModificationUserId], [Order], [OrderNumber], [ParentId], [Remark], [RowVersion], [Title], Depth, Path, HasChildren) as
(
	--初始查询（这里的 ParentId is null 在我的数据中是最底层的根节点）
	select [Id], [CreationTime], [CreationUserId], [IsDeleted], [IsEnable], [LastModificationTime], [LastModificationUserId], [Order], [OrderNumber], [ParentId], [Remark], [RowVersion], [Title],
		0 as Depth,
		'/' + cast(Id as nvarchar(max)) as Path, --如果Id使用Guid类型，可能会导致层数太深时出问题（大概100层左右，超过4000字之后的字符串会被砍掉,sqlserver 2005以后用 nvarchar(max)可以突破限制），Guid的字数太多了
		HasChildren = (case when exists(select 1 from Menus where Menus.ParentId = root.id) then cast(1 as bit) else cast(0 as bit) end)
	from Menus as root
	where ParentId is null

	union all
	--递归条件
	select child.[Id], child.[CreationTime], child.[CreationUserId], child.[IsDeleted], child.[IsEnable], child.[LastModificationTime], child.[LastModificationUserId], child.[Order], child.[OrderNumber], child.[ParentId], child.[Remark], child.[RowVersion], child.[Title],
		parent.Depth+1,
		parent.Path + '/' + cast(child.Id as nvarchar(max)),
		HasChildren = (case when exists(select 1 from Menus where Menus.ParentId = child.id) then cast(1 as bit) else cast(0 as bit) end)
	from Menus as child --3：这里的临时表和原始数据表都必须使用别名不然递归的时候不知道查询的是那个表的列
	inner join
	temp as parent
	on (child.ParentId = parent.Id) --这个关联关系很重要，一定要理解一下谁是谁的父节点
)
select * --top 100 percent * --Id, pId, Str, depth, path, hasChild -- 要创建索引的视图不能使用 select * 的写法 -- 带公用表表达式的视图无法创建索引
from temp
--order by temp.Id --4：递归完成后 一定不要少了这句查询语句 否则会报错 -- 创建视图则无需排序，视图的排序对外部引用无效，要在外部查询指定排序

GO

----在视图上建立唯一的聚集索引
--create unique clustered index
--Index_View on view_Menus(Id)

----在视图上建立非聚集索引
--create index
--Index_View_depth on view_Menus(depth)

--create index
--Index_View_hasChild on view_Menus(hasChild)

--create index
--Index_View_path on view_Menus(path)
--go

----为表明已经给视图建立一个索引，并且它确实占用数据库的空间，运行下面的脚本查明聚集索引有多少行以及视图占用多少空间。
--execute sp_spaceused 'viewTree'
--go

GO


--判断视图是否存在
if exists(select * from sysobjects where id=OBJECT_ID(N'view_TreeDomains') and objectproperty(id,N'IsView')=1)
drop view view_TreeDomains    --删除视图

GO

create view view_TreeDomains    --创建视图
--with schemaBinding    --如果要创建带索引的视图要加上这句
as
with temp([Id], [CreationTime], [CreationUserId], [IsDeleted], [IsEnable], [LastModificationTime], [LastModificationUserId], [OrderNumber], [ParentId], [Remark], [RowVersion], [SampleColumn], Depth, Path, HasChildren) as
(
	--初始查询（这里的 ParentId is null 在我的数据中是最底层的根节点）
	select [Id], [CreationTime], [CreationUserId], [IsDeleted], [IsEnable], [LastModificationTime], [LastModificationUserId], [OrderNumber], [ParentId], [Remark], [RowVersion], [SampleColumn],
		0 as Depth,
		'/' + cast(Id as nvarchar(max)) as Path, --如果Id使用Guid类型，可能会导致层数太深时出问题（大概100层左右，超过4000字之后的字符串会被砍掉,sqlserver 2005以后用 nvarchar(max)可以突破限制），Guid的字数太多了
		HasChildren = (case when exists(select 1 from TreeDomains where TreeDomains.ParentId = root.id) then cast(1 as bit) else cast(0 as bit) end)
	from TreeDomains as root
	where ParentId is null

	union all
	--递归条件
	select child.[Id], child.[CreationTime], child.[CreationUserId], child.[IsDeleted], child.[IsEnable], child.[LastModificationTime], child.[LastModificationUserId], child.[OrderNumber], child.[ParentId], child.[Remark], child.[RowVersion], child.[SampleColumn],
		parent.Depth+1,
		parent.Path + '/' + cast(child.Id as nvarchar(max)),
		HasChildren = (case when exists(select 1 from TreeDomains where TreeDomains.ParentId = child.id) then cast(1 as bit) else cast(0 as bit) end)
	from TreeDomains as child --3：这里的临时表和原始数据表都必须使用别名不然递归的时候不知道查询的是那个表的列
	inner join
	temp as parent
	on (child.ParentId = parent.Id) --这个关联关系很重要，一定要理解一下谁是谁的父节点
)
select * --top 100 percent * --Id, pId, Str, depth, path, hasChild -- 要创建索引的视图不能使用 select * 的写法 -- 带公用表表达式的视图无法创建索引
from temp
--order by temp.Id --4：递归完成后 一定不要少了这句查询语句 否则会报错 -- 创建视图则无需排序，视图的排序对外部引用无效，要在外部查询指定排序

GO

----在视图上建立唯一的聚集索引
--create unique clustered index
--Index_View on view_TreeDomains(Id)

----在视图上建立非聚集索引
--create index
--Index_View_depth on view_TreeDomains(depth)

--create index
--Index_View_hasChild on view_TreeDomains(hasChild)

--create index
--Index_View_path on view_TreeDomains(path)
--go

----为表明已经给视图建立一个索引，并且它确实占用数据库的空间，运行下面的脚本查明聚集索引有多少行以及视图占用多少空间。
--execute sp_spaceused 'viewTree'
--go

GO


--判断视图是否存在
if exists(select * from sysobjects where id=OBJECT_ID(N'view_AppRoles') and objectproperty(id,N'IsView')=1)
drop view view_AppRoles    --删除视图

GO

create view view_AppRoles    --创建视图
--with schemaBinding    --如果要创建带索引的视图要加上这句
as
with temp([Id], [ConcurrencyStamp], [CreationTime], [CreationUserId], [Description], [IsDeleted], [IsEnable], [LastModificationTime], [LastModificationUserId], [Name], [NormalizedName], [OrderNumber], [ParentId], [RowVersion], Depth, Path, HasChildren) as
(
	--初始查询（这里的 ParentId is null 在我的数据中是最底层的根节点）
	select [Id], [ConcurrencyStamp], [CreationTime], [CreationUserId], [Description], [IsDeleted], [IsEnable], [LastModificationTime], [LastModificationUserId], [Name], [NormalizedName], [OrderNumber], [ParentId], [RowVersion],
		0 as Depth,
		'/' + cast(Id as nvarchar(max)) as Path, --如果Id使用Guid类型，可能会导致层数太深时出问题（大概100层左右，超过4000字之后的字符串会被砍掉,sqlserver 2005以后用 nvarchar(max)可以突破限制），Guid的字数太多了
		HasChildren = (case when exists(select 1 from AppRoles where AppRoles.ParentId = root.id) then cast(1 as bit) else cast(0 as bit) end)
	from AppRoles as root
	where ParentId is null

	union all
	--递归条件
	select child.[Id], child.[ConcurrencyStamp], child.[CreationTime], child.[CreationUserId], child.[Description], child.[IsDeleted], child.[IsEnable], child.[LastModificationTime], child.[LastModificationUserId], child.[Name], child.[NormalizedName], child.[OrderNumber], child.[ParentId], child.[RowVersion],
		parent.Depth+1,
		parent.Path + '/' + cast(child.Id as nvarchar(max)),
		HasChildren = (case when exists(select 1 from AppRoles where AppRoles.ParentId = child.id) then cast(1 as bit) else cast(0 as bit) end)
	from AppRoles as child --3：这里的临时表和原始数据表都必须使用别名不然递归的时候不知道查询的是那个表的列
	inner join
	temp as parent
	on (child.ParentId = parent.Id) --这个关联关系很重要，一定要理解一下谁是谁的父节点
)
select * --top 100 percent * --Id, pId, Str, depth, path, hasChild -- 要创建索引的视图不能使用 select * 的写法 -- 带公用表表达式的视图无法创建索引
from temp
--order by temp.Id --4：递归完成后 一定不要少了这句查询语句 否则会报错 -- 创建视图则无需排序，视图的排序对外部引用无效，要在外部查询指定排序

GO

----在视图上建立唯一的聚集索引
--create unique clustered index
--Index_View on view_AppRoles(Id)

----在视图上建立非聚集索引
--create index
--Index_View_depth on view_AppRoles(depth)

--create index
--Index_View_hasChild on view_AppRoles(hasChild)

--create index
--Index_View_path on view_AppRoles(path)
--go

----为表明已经给视图建立一个索引，并且它确实占用数据库的空间，运行下面的脚本查明聚集索引有多少行以及视图占用多少空间。
--execute sp_spaceused 'viewTree'
--go

GO


if exists (
	select t.name as tname,c.name as cname, d.value as Description
	from sysobjects t
	left join syscolumns c
	on c.id=t.id and t.xtype='U' and t.name<>'dtproperties'
	left join sys.extended_properties d
	on c.id=d.major_id and c.colid=d.minor_id and d.name = 'MS_Description'
	where t.name = 'AppUsers' and c.name = 'Sex' and d.value is not null)
begin
	exec sys.sp_dropextendedproperty
    @name=N'MS_Description'
  , @level0type=N'SCHEMA'
  , @level0name=N'dbo'
  , @level1type=N'TABLE'
  , @level1name=N'AppUsers'
  , @level2type=N'COLUMN'
  , @level2name=N'Sex'
end

GO

exec sys.sp_addextendedproperty
    @name=N'MS_Description'
  , @value=N'性别 ( 性别枚举; 1 : 男; 2 : 女 )'
  , @level0type=N'SCHEMA'
  , @level0name=N'dbo'
  , @level1type=N'TABLE'
  , @level1name=N'AppUsers'
  , @level2type=N'COLUMN'
  , @level2name=N'Sex'

GO


if exists (
	select t.name as tname, d.value as Description
	from sysobjects t
	left join sys.extended_properties d
	on t.id = d.major_id and d.minor_id = 0 and d.name = 'MS_Description'
	where t.name = 'ComplexProperty' and d.value is not null)
begin
	exec sys.sp_dropextendedproperty
    @name=N'MS_Description'
  , @level0type=N'SCHEMA'
  , @level0name=N'dbo'
  , @level1type=N'TABLE'
  , @level1name=N'ComplexProperty'
  , @level2type=NULL
  , @level2name=NULL
end

GO

exec sys.sp_addextendedproperty
    @name=N'MS_Description'
  , @value=N'示例复杂实体属性类（分表存储时会成为表说明，内部属性存储到主表时没有作用）'
  , @level0type=N'SCHEMA'
  , @level0name=N'dbo'
  , @level1type=N'TABLE'
  , @level1name=N'ComplexProperty'
  , @level2type= NULL
  , @level2name= NULL

GO


if exists (
	select t.name as tname,c.name as cname, d.value as Description
	from sysobjects t
	left join syscolumns c
	on c.id=t.id and t.xtype='U' and t.name<>'dtproperties'
	left join sys.extended_properties d
	on c.id=d.major_id and c.colid=d.minor_id and d.name = 'MS_Description'
	where t.name = 'ComplexProperty' and c.name = 'C1' and d.value is not null)
begin
	exec sys.sp_dropextendedproperty
    @name=N'MS_Description'
  , @level0type=N'SCHEMA'
  , @level0name=N'dbo'
  , @level1type=N'TABLE'
  , @level1name=N'ComplexProperty'
  , @level2type=N'COLUMN'
  , @level2name=N'C1'
end

GO

exec sys.sp_addextendedproperty
    @name=N'MS_Description'
  , @value=N'示例复杂实体属性列1'
  , @level0type=N'SCHEMA'
  , @level0name=N'dbo'
  , @level1type=N'TABLE'
  , @level1name=N'ComplexProperty'
  , @level2type=N'COLUMN'
  , @level2name=N'C1'

GO


if exists (
	select t.name as tname,c.name as cname, d.value as Description
	from sysobjects t
	left join syscolumns c
	on c.id=t.id and t.xtype='U' and t.name<>'dtproperties'
	left join sys.extended_properties d
	on c.id=d.major_id and c.colid=d.minor_id and d.name = 'MS_Description'
	where t.name = 'ComplexProperty' and c.name = 'C2' and d.value is not null)
begin
	exec sys.sp_dropextendedproperty
    @name=N'MS_Description'
  , @level0type=N'SCHEMA'
  , @level0name=N'dbo'
  , @level1type=N'TABLE'
  , @level1name=N'ComplexProperty'
  , @level2type=N'COLUMN'
  , @level2name=N'C2'
end

GO

exec sys.sp_addextendedproperty
    @name=N'MS_Description'
  , @value=N'示例复杂实体属性列2'
  , @level0type=N'SCHEMA'
  , @level0name=N'dbo'
  , @level1type=N'TABLE'
  , @level1name=N'ComplexProperty'
  , @level2type=N'COLUMN'
  , @level2name=N'C2'

GO


if exists (
	select t.name as tname, d.value as Description
	from sysobjects t
	left join sys.extended_properties d
	on t.id = d.major_id and d.minor_id = 0 and d.name = 'MS_Description'
	where t.name = 'ComplexProperty2' and d.value is not null)
begin
	exec sys.sp_dropextendedproperty
    @name=N'MS_Description'
  , @level0type=N'SCHEMA'
  , @level0name=N'dbo'
  , @level1type=N'TABLE'
  , @level1name=N'ComplexProperty2'
  , @level2type=NULL
  , @level2name=NULL
end

GO

exec sys.sp_addextendedproperty
    @name=N'MS_Description'
  , @value=N'示例复杂实体属性类2（分表存储时会成为表说明，内部属性存储到主表时没有作用，上级表（ComplexEntityProperty的属性所在的表）分表存储时内部属性存储到上级表时会覆盖上级表的表说明）'
  , @level0type=N'SCHEMA'
  , @level0name=N'dbo'
  , @level1type=N'TABLE'
  , @level1name=N'ComplexProperty2'
  , @level2type= NULL
  , @level2name= NULL

GO


if exists (
	select t.name as tname,c.name as cname, d.value as Description
	from sysobjects t
	left join syscolumns c
	on c.id=t.id and t.xtype='U' and t.name<>'dtproperties'
	left join sys.extended_properties d
	on c.id=d.major_id and c.colid=d.minor_id and d.name = 'MS_Description'
	where t.name = 'ComplexProperty2' and c.name = 'C3' and d.value is not null)
begin
	exec sys.sp_dropextendedproperty
    @name=N'MS_Description'
  , @level0type=N'SCHEMA'
  , @level0name=N'dbo'
  , @level1type=N'TABLE'
  , @level1name=N'ComplexProperty2'
  , @level2type=N'COLUMN'
  , @level2name=N'C3'
end

GO

exec sys.sp_addextendedproperty
    @name=N'MS_Description'
  , @value=N'示例复杂实体属性列3'
  , @level0type=N'SCHEMA'
  , @level0name=N'dbo'
  , @level1type=N'TABLE'
  , @level1name=N'ComplexProperty2'
  , @level2type=N'COLUMN'
  , @level2name=N'C3'

GO


if exists (
	select t.name as tname,c.name as cname, d.value as Description
	from sysobjects t
	left join syscolumns c
	on c.id=t.id and t.xtype='U' and t.name<>'dtproperties'
	left join sys.extended_properties d
	on c.id=d.major_id and c.colid=d.minor_id and d.name = 'MS_Description'
	where t.name = 'ComplexProperty2' and c.name = 'C4' and d.value is not null)
begin
	exec sys.sp_dropextendedproperty
    @name=N'MS_Description'
  , @level0type=N'SCHEMA'
  , @level0name=N'dbo'
  , @level1type=N'TABLE'
  , @level1name=N'ComplexProperty2'
  , @level2type=N'COLUMN'
  , @level2name=N'C4'
end

GO

exec sys.sp_addextendedproperty
    @name=N'MS_Description'
  , @value=N'示例复杂实体属性列4'
  , @level0type=N'SCHEMA'
  , @level0name=N'dbo'
  , @level1type=N'TABLE'
  , @level1name=N'ComplexProperty2'
  , @level2type=N'COLUMN'
  , @level2name=N'C4'

GO


if exists (
	select t.name as tname, d.value as Description
	from sysobjects t
	left join sys.extended_properties d
	on t.id = d.major_id and d.minor_id = 0 and d.name = 'MS_Description'
	where t.name = 'Domains' and d.value is not null)
begin
	exec sys.sp_dropextendedproperty
    @name=N'MS_Description'
  , @level0type=N'SCHEMA'
  , @level0name=N'dbo'
  , @level1type=N'TABLE'
  , @level1name=N'Domains'
  , @level2type=NULL
  , @level2name=NULL
end

GO

exec sys.sp_addextendedproperty
    @name=N'MS_Description'
  , @value=N'示例实体'
  , @level0type=N'SCHEMA'
  , @level0name=N'dbo'
  , @level1type=N'TABLE'
  , @level1name=N'Domains'
  , @level2type= NULL
  , @level2name= NULL

GO


if exists (
	select t.name as tname,c.name as cname, d.value as Description
	from sysobjects t
	left join syscolumns c
	on c.id=t.id and t.xtype='U' and t.name<>'dtproperties'
	left join sys.extended_properties d
	on c.id=d.major_id and c.colid=d.minor_id and d.name = 'MS_Description'
	where t.name = 'Domains' and c.name = 'SC' and d.value is not null)
begin
	exec sys.sp_dropextendedproperty
    @name=N'MS_Description'
  , @level0type=N'SCHEMA'
  , @level0name=N'dbo'
  , @level1type=N'TABLE'
  , @level1name=N'Domains'
  , @level2type=N'COLUMN'
  , @level2name=N'SC'
end

GO

exec sys.sp_addextendedproperty
    @name=N'MS_Description'
  , @value=N'示例列'
  , @level0type=N'SCHEMA'
  , @level0name=N'dbo'
  , @level1type=N'TABLE'
  , @level1name=N'Domains'
  , @level2type=N'COLUMN'
  , @level2name=N'SC'

GO


if exists (
	select t.name as tname, d.value as Description
	from sysobjects t
	left join sys.extended_properties d
	on t.id = d.major_id and d.minor_id = 0 and d.name = 'MS_Description'
	where t.name = 'TreeDomains' and d.value is not null)
begin
	exec sys.sp_dropextendedproperty
    @name=N'MS_Description'
  , @level0type=N'SCHEMA'
  , @level0name=N'dbo'
  , @level1type=N'TABLE'
  , @level1name=N'TreeDomains'
  , @level2type=NULL
  , @level2name=NULL
end

GO

exec sys.sp_addextendedproperty
    @name=N'MS_Description'
  , @value=N'示例树形实体'
  , @level0type=N'SCHEMA'
  , @level0name=N'dbo'
  , @level1type=N'TABLE'
  , @level1name=N'TreeDomains'
  , @level2type= NULL
  , @level2name= NULL

GO


if exists (
	select t.name as tname,c.name as cname, d.value as Description
	from sysobjects t
	left join syscolumns c
	on c.id=t.id and t.xtype='U' and t.name<>'dtproperties'
	left join sys.extended_properties d
	on c.id=d.major_id and c.colid=d.minor_id and d.name = 'MS_Description'
	where t.name = 'TreeDomains' and c.name = 'SampleColumn' and d.value is not null)
begin
	exec sys.sp_dropextendedproperty
    @name=N'MS_Description'
  , @level0type=N'SCHEMA'
  , @level0name=N'dbo'
  , @level1type=N'TABLE'
  , @level1name=N'TreeDomains'
  , @level2type=N'COLUMN'
  , @level2name=N'SampleColumn'
end

GO

exec sys.sp_addextendedproperty
    @name=N'MS_Description'
  , @value=N'示例列'
  , @level0type=N'SCHEMA'
  , @level0name=N'dbo'
  , @level1type=N'TABLE'
  , @level1name=N'TreeDomains'
  , @level2type=N'COLUMN'
  , @level2name=N'SampleColumn'

GO

INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
VALUES (N'20190422074954_InitialApplicationDbMigration', N'2.2.3-servicing-35854');

GO


