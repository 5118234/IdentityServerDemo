// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.EntityFrameworkCore;

namespace DbMigration.Application
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("sysDateTimeOffset()");

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'False'");

                    b.Property<bool?>("IsEnable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'True'");

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<long>("OrderNumber")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ParentId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("ParentId");

                    b.ToTable("AppRoles");
                });

            modelBuilder.Entity("Domain.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("sysDateTimeOffset()");

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'False'");

                    b.Property<bool?>("IsEnable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'True'");

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<long>("OrderNumber");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("sysDateTimeOffset()");

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'False'");

                    b.Property<bool?>("IsEnable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'True'");

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<long>("OrderNumber")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SecurityStamp");

                    b.Property<int?>("Sex")
                        .HasAnnotation("DbDescription", "性别 ( 性别枚举; 1 : 男; 2 : 女 )");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("Domain.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("sysDateTimeOffset()");

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'False'");

                    b.Property<bool?>("IsEnable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'True'");

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<long>("OrderNumber");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Domain.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("sysDateTimeOffset()");

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'False'");

                    b.Property<bool?>("IsEnable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'True'");

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<long>("OrderNumber")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Domain.Identity.ApplicationUserOrganization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("sysDateTimeOffset()");

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'False'");

                    b.Property<bool?>("IsEnable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'True'");

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<long>("OrderNumber")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("Remark");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserOrganizations");
                });

            modelBuilder.Entity("Domain.Identity.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("RoleId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("sysDateTimeOffset()");

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'False'");

                    b.Property<bool?>("IsEnable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'True'");

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<long>("OrderNumber")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRoles");
                });

            modelBuilder.Entity("Domain.Identity.ApplicationUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("sysDateTimeOffset()");

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'False'");

                    b.Property<bool?>("IsEnable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'True'");

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<long>("OrderNumber")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("Domain.Identity.Organization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("sysDateTimeOffset()");

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'False'");

                    b.Property<bool?>("IsEnable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'True'");

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("Name");

                    b.Property<long>("OrderNumber")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ParentId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("Remark");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.HasIndex("ParentId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Domain.Management.Menu", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("sysDateTimeOffset()");

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'False'");

                    b.Property<bool?>("IsEnable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'True'");

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<short>("Order");

                    b.Property<long>("OrderNumber")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ParentId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("Remark");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.HasIndex("ParentId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Domain.Management.MenuItem", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("sysDateTimeOffset()");

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'False'");

                    b.Property<bool?>("IsEnable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'True'");

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("Link");

                    b.Property<string>("MenuId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<short>("Order");

                    b.Property<long>("OrderNumber")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Remark");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.HasIndex("MenuId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("Domain.Sample.Domain", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("sysDateTimeOffset()");

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'False'");

                    b.Property<bool?>("IsEnable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'True'");

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<long>("OrderNumber")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Remark");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SampleColumn")
                        .HasColumnName("SC")
                        .HasAnnotation("DbDescription", "示例列");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.ToTable("Domains");

                    b.HasAnnotation("DbDescription", "示例实体");
                });

            modelBuilder.Entity("Domain.Sample.TreeDomain", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("sysDateTimeOffset()");

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'False'");

                    b.Property<bool?>("IsEnable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'True'");

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<long>("OrderNumber")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ParentId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("Remark");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SampleColumn")
                        .HasAnnotation("DbDescription", "示例列");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.HasIndex("ParentId");

                    b.ToTable("TreeDomains");

                    b.HasAnnotation("DbDescription", "示例树形实体");
                });

            modelBuilder.Entity("Domain.Security.AuthorizationRule", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("AuthorizationRuleConfigJson");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("sysDateTimeOffset()");

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'False'");

                    b.Property<bool?>("IsEnable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'True'");

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<long>("OrderNumber")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Remark");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.ToTable("AuthorizationRules");
                });

            modelBuilder.Entity("Domain.Security.OrganizationPermissionDeclaration", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("sysDateTimeOffset()");

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'False'");

                    b.Property<bool?>("IsEnable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'True'");

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<long>("OrderNumber")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OrganizationId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("PermissionDefinitionId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<short>("PermissionValue");

                    b.Property<string>("Remark");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PermissionDefinitionId");

                    b.ToTable("OrganizationPermissionDeclarations");
                });

            modelBuilder.Entity("Domain.Security.PermissionDefinition", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("sysDateTimeOffset()");

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'False'");

                    b.Property<bool?>("IsEnable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'True'");

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("Name");

                    b.Property<long>("OrderNumber")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Remark");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<short>("ValueType");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.ToTable("PermissionDefinitions");
                });

            modelBuilder.Entity("Domain.Security.RequestAuthorizationRule", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("AuthorizationRuleId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("sysDateTimeOffset()");

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("HandlerMethodSignature");

                    b.Property<string>("IdentificationKey");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'False'");

                    b.Property<bool?>("IsEnable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'True'");

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<long>("OrderNumber")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Remark");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("TypeFullName");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationRuleId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.ToTable("RequestAuthorizationRules");
                });

            modelBuilder.Entity("Domain.Security.RolePermissionDeclaration", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("sysDateTimeOffset()");

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'False'");

                    b.Property<bool?>("IsEnable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'True'");

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<long>("OrderNumber")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PermissionDefinitionId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<short>("PermissionValue");

                    b.Property<string>("Remark");

                    b.Property<string>("RoleId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.HasIndex("PermissionDefinitionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissionDeclarations");
                });

            modelBuilder.Entity("Domain.Security.UserPermissionDeclaration", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("sysDateTimeOffset()");

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'False'");

                    b.Property<bool?>("IsEnable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("'True'");

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<long>("OrderNumber")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PermissionDefinitionId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<short>("PermissionValue");

                    b.Property<string>("Remark");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.HasIndex("PermissionDefinitionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermissionDeclarations");
                });

            modelBuilder.Entity("Domain.Identity.ApplicationRole", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");

                    b.HasOne("Domain.Identity.ApplicationRole", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Domain.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");

                    b.HasOne("Domain.Identity.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Identity.ApplicationUser", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");
                });

            modelBuilder.Entity("Domain.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Identity.ApplicationUserOrganization", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");

                    b.HasOne("Domain.Identity.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Identity.ApplicationUser", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");

                    b.HasOne("Domain.Identity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Identity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Identity.Organization", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");

                    b.HasOne("Domain.Identity.Organization", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Domain.Management.Menu", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");

                    b.HasOne("Domain.Management.Menu", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.OwnsOne("Domain.Management.Icon", "Icon", b1 =>
                        {
                            b1.Property<string>("MenuId")
                                .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                            b1.Property<string>("Type");

                            b1.Property<string>("Value");

                            b1.HasKey("MenuId");

                            b1.ToTable("Menus");

                            b1.HasOne("Domain.Management.Menu")
                                .WithOne("Icon")
                                .HasForeignKey("Domain.Management.Icon", "MenuId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Domain.Management.MenuItem", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");

                    b.HasOne("Domain.Management.Menu", "Menu")
                        .WithMany("Items")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Domain.Management.Icon", "Icon", b1 =>
                        {
                            b1.Property<string>("MenuItemId")
                                .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                            b1.Property<string>("Type");

                            b1.Property<string>("Value");

                            b1.HasKey("MenuItemId");

                            b1.ToTable("MenuItems");

                            b1.HasOne("Domain.Management.MenuItem")
                                .WithOne("Icon")
                                .HasForeignKey("Domain.Management.Icon", "MenuItemId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Domain.Sample.Domain", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");

                    b.OwnsOne("Domain.Sample.ComplexEntityProperty", "ComplexProperty", b1 =>
                        {
                            b1.Property<string>("DomainId")
                                .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                            b1.Property<string>("C1")
                                .HasAnnotation("DbDescription", "示例复杂实体属性列1");

                            b1.Property<string>("C2")
                                .HasAnnotation("DbDescription", "示例复杂实体属性列2");

                            b1.HasKey("DomainId");

                            b1.ToTable("ComplexProperty");

                            b1.HasEntityTypeAnnotation("DbDescription", "示例复杂实体属性类（分表存储时会成为表说明，内部属性存储到主表时没有作用）");

                            b1.HasOne("Domain.Sample.Domain")
                                .WithOne("ComplexProperty")
                                .HasForeignKey("Domain.Sample.ComplexEntityProperty", "DomainId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("Domain.Sample.ComplexEntityProperty2", "ComplexProperty2", b2 =>
                                {
                                    b2.Property<string>("ComplexEntityPropertyDomainId")
                                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                                    b2.Property<string>("C3")
                                        .HasAnnotation("DbDescription", "示例复杂实体属性列3");

                                    b2.Property<string>("C4")
                                        .HasAnnotation("DbDescription", "示例复杂实体属性列4");

                                    b2.HasKey("ComplexEntityPropertyDomainId");

                                    b2.ToTable("ComplexProperty2");

                                    b2.HasEntityTypeAnnotation("DbDescription", "示例复杂实体属性类2（分表存储时会成为表说明，内部属性存储到主表时没有作用，上级表（ComplexEntityProperty的属性所在的表）分表存储时内部属性存储到上级表时会覆盖上级表的表说明）");

                                    b2.HasOne("Domain.Sample.ComplexEntityProperty")
                                        .WithOne("ComplexProperty2")
                                        .HasForeignKey("Domain.Sample.ComplexEntityProperty2", "ComplexEntityPropertyDomainId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });
                });

            modelBuilder.Entity("Domain.Sample.TreeDomain", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");

                    b.HasOne("Domain.Sample.TreeDomain", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Domain.Security.AuthorizationRule", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");
                });

            modelBuilder.Entity("Domain.Security.OrganizationPermissionDeclaration", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");

                    b.HasOne("Domain.Identity.Organization", "Organization")
                        .WithMany("PermissionDeclarations")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Domain.Security.PermissionDefinition", "PermissionDefinition")
                        .WithMany()
                        .HasForeignKey("PermissionDefinitionId");
                });

            modelBuilder.Entity("Domain.Security.PermissionDefinition", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");
                });

            modelBuilder.Entity("Domain.Security.RequestAuthorizationRule", b =>
                {
                    b.HasOne("Domain.Security.AuthorizationRule", "AuthorizationRule")
                        .WithMany("RequestAuthorizationRules")
                        .HasForeignKey("AuthorizationRuleId");

                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");
                });

            modelBuilder.Entity("Domain.Security.RolePermissionDeclaration", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");

                    b.HasOne("Domain.Security.PermissionDefinition", "PermissionDefinition")
                        .WithMany()
                        .HasForeignKey("PermissionDefinitionId");

                    b.HasOne("Domain.Identity.ApplicationRole", "Role")
                        .WithMany("PermissionDeclarations")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Domain.Security.UserPermissionDeclaration", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");

                    b.HasOne("Domain.Security.PermissionDefinition", "PermissionDefinition")
                        .WithMany()
                        .HasForeignKey("PermissionDefinitionId");

                    b.HasOne("Domain.Identity.ApplicationUser", "User")
                        .WithMany("PermissionDeclarations")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
