// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.EntityFrameworkCore.Identity;

namespace DbMigration.Identity
{
    [DbContext(typeof(ApplicationIdentityDbContext))]
    [Migration("20181018080522_InitialIdentityDbMigration")]
    partial class InitialIdentityDbMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<long>("OrderNumber")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ParentId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("ParentId");

                    b.ToTable("AppRoles");
                });

            modelBuilder.Entity("Domain.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<long>("OrderNumber");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<long>("OrderNumber")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SecurityStamp");

                    b.Property<int?>("Sex");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("Domain.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<long>("OrderNumber");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Domain.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<long>("OrderNumber")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Domain.Identity.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("RoleId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<long>("OrderNumber")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRoles");
                });

            modelBuilder.Entity("Domain.Identity.ApplicationUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<long>("OrderNumber")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("Domain.Sample.Domain", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<long>("OrderNumber")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SampleColumn")
                        .HasColumnName("SC");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.ToTable("Domains");
                });

            modelBuilder.Entity("Domain.Sample.TreeDomain", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<DateTimeOffset>("CreationTime")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEnable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset>("LastModificationTime");

                    b.Property<string>("LastModificationUserId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<long>("OrderNumber")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ParentId")
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("SampleColumn");

                    b.HasKey("Id");

                    b.HasIndex("CreationUserId");

                    b.HasIndex("LastModificationUserId");

                    b.HasIndex("ParentId");

                    b.ToTable("TreeDomains");
                });

            modelBuilder.Entity("Domain.Identity.ApplicationRole", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");

                    b.HasOne("Domain.Identity.ApplicationRole", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Domain.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");

                    b.HasOne("Domain.Identity.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Identity.ApplicationUser", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");
                });

            modelBuilder.Entity("Domain.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");

                    b.HasOne("Domain.Identity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Identity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Sample.Domain", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");

                    b.OwnsOne("Domain.Sample.ComplexEntityProperty", "ComplexProperty", b1 =>
                        {
                            b1.Property<string>("DomainId")
                                .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                            b1.Property<string>("C1");

                            b1.Property<string>("C2");

                            b1.ToTable("ComplexProperty");

                            b1.HasOne("Domain.Sample.Domain")
                                .WithOne("ComplexProperty")
                                .HasForeignKey("Domain.Sample.ComplexEntityProperty", "DomainId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("Domain.Sample.ComplexEntityProperty2", "ComplexProperty2", b2 =>
                                {
                                    b2.Property<string>("ComplexEntityPropertyDomainId")
                                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 36)));

                                    b2.Property<string>("C3");

                                    b2.Property<string>("C4");

                                    b2.ToTable("ComplexProperty2");

                                    b2.HasOne("Domain.Sample.ComplexEntityProperty")
                                        .WithOne("ComplexProperty2")
                                        .HasForeignKey("Domain.Sample.ComplexEntityProperty2", "ComplexEntityPropertyDomainId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });
                });

            modelBuilder.Entity("Domain.Sample.TreeDomain", b =>
                {
                    b.HasOne("Domain.Identity.ApplicationUser", "CreationUser")
                        .WithMany()
                        .HasForeignKey("CreationUserId");

                    b.HasOne("Domain.Identity.ApplicationUser", "LastModificationUser")
                        .WithMany()
                        .HasForeignKey("LastModificationUserId");

                    b.HasOne("Domain.Sample.TreeDomain", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });
#pragma warning restore 612, 618
        }
    }
}
